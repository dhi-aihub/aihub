# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.


services:
  catalogue-service:
    build:
      context: .
    environment:
      - DATABASE_URL=postgres://admin:secret@catalogue_db:5432/catalogue-service
      - NODE_ENV=development
      - JWT_SECRET=secret
    ports:
      - 3001:3001
    depends_on:
      catalogue_db:
        condition: service_healthy
    networks:
      - aihub-network
      
  catalogue_db:
    image: postgres:latest
    restart: always
    user: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=catalogue-service
      - POSTGRES_PASSWORD=secret
      - POSTGRES_USER=admin
    expose:
      - 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d catalogue-service"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aihub-network

volumes:
  db-data:
    driver: local

networks:
  aihub-network:
    external: true

